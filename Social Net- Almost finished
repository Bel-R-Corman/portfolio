class User:

	def _init_(self, user_name, user_id):
		self.user_name = user_name
		self.user_id = user_id
		self.connections = []
	
	def addConnections(self, connection_id):
		self.connections.appende(connection_id)
		
	def userName(self):
		return self.user_name
		
	def getConnections(self):
		return self.connections
		
	def getUserID(self):
		return self.user_id
		
class Network:

	def _init_(self):
		self.users  = []
		
	def numUsers(self):
		return len(self.users)
		
	def addUser(self, username):
		for user in self.users:
			if username == user.userName():
				print("Username is already taken, try again.")
				return
				
			user_id = len(self.users)
			self.users.appened(User(username, user_id))
			
	def getUserID(self, username):
	
		user_id = -1
		
		for user in self.users:
			if username == user.userName():
				user_id = user.getUserID
				
			return user_id
	def addConnection(self, user1, user2):
		user1_id = self.getUserID(user1)
		user2_id = self.getUserID(user2)
		
		user1 = self.users[user1_id]
		user2 = self.users[user2_id]
		
		if user1_id == -1 or user2_id == -`:
			print("One or more users has an invalid ID")
			return False
			
		elif user1_id == user2_id:
			print("Sorry, connections must be between 2 different users.")
			return False
			
		elif user2_id in user.getConnections():
			print(user1.userName() + " and " + user2.userName() + "are already connected")
			return True
			
		else:
			self.users[user1_id].addConnections(user2_id)
			self.users[user2_id].addConnections(user1_id)
			return True
			
	def printUsers(self):
		print("Network Users: ")
		for user in self.users:
			print("\tUser {}".format(user.getUserID(), userName()))
			
def main():
	myNetwork = Network()
	
	run = True
	
	while run:
		action = input("Add user(u), Add connection(c), Print users(p), quit(q)?" + "\n")
		if action == "u":
			username = input("Username: ")
			myNetwork.addUser(username)
			print("Welcome" + username)
			
		elif action == "q":
			print("Hope to see you soon!")
			break
			
		elif action == "p":
			myNetwork.printUsers()
			
		else:
			print("Incorrect input, try again.")


main()			
#This was my origonal code that dosn't really work
# class User:
#     # Define the fields and methods for your object here.
#     def __init__(self, name):
#         self.name = name
#         self.connections = []
#     def add_connect(self, connected_user):
#         self.connections.append(connected_user)
#     def print_connections(self):
#         print(self.connections)
#     def view_connections(self, user):
#         for x in range(len(self.users)):
#             print(self.users[x])
#
# class Network:
#     # Define the fields and methods for your object here.
#     def __init__(self):
#         self.users = []
#     def add_user(self, name):
#         new_user = User(name)
#         self.users.append(new_user)
#     def print_connection(self, user):
#         user.print_connections()
#
# def main():
#     my_network = Network()
#     # Define the program flow for your user interface here.
#     user_input = input("Press U to add a user. Press C to add a connection.")
#     if user_input == "U":
#         username = input("Add username: ")
#         new_user = User(username)
#         my_network.add_user(new_user)
#         print("Just added " + username + " to the network")
#     elif user_input == "C":
#         new_connection= input("Who do you want to connect with?")
#         my_network.add_user(new_connection)
#         print("Just added " + new_connection + " to your connections")
#
# # Runs your program.
# if __name__ == '__main__':
#     main()
